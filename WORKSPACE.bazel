workspace(
    name = "monorepo",
)

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

################################################
# Make sure we are pulling a recent skylib
################################################
http_archive(
    name = "bazel_skylib",
    sha256 = "f7be3474d42aae265405a592bb7da8e171919d74c16f082a5457840f06054728",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.2.1/bazel-skylib-1.2.1.tar.gz",
        "https://github.com/bazelbuild/bazel-skylib/releases/download/1.2.1/bazel-skylib-1.2.1.tar.gz",
    ],
)

load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")

bazel_skylib_workspace()

################################################
# Pulling rules_nixpkgs (to use nix-sourced compilers instead of native toolchains)
################################################
http_archive(
    name = "io_tweag_rules_nixpkgs",
    sha256 = "657db2e70d933f252735a5a5c9f532c4cd5e77018b9d7256bc9c7b80a01e96b5",
    strip_prefix = "rules_nixpkgs-816e913f41d161659cbd1e49ff77694853398a3a",
    urls = ["https://github.com/tweag/rules_nixpkgs/archive/816e913f41d161659cbd1e49ff77694853398a3a.tar.gz"],
)

load("@io_tweag_rules_nixpkgs//nixpkgs:repositories.bzl", "rules_nixpkgs_dependencies")

# load everything that rules_nixpkgs rules need to work
rules_nixpkgs_dependencies()

load(
    "@io_tweag_rules_nixpkgs//nixpkgs:nixpkgs.bzl",
    "nixpkgs_cc_configure",
    "nixpkgs_java_configure",
    "nixpkgs_local_repository",
    "nixpkgs_python_configure",
    "nixpkgs_sh_posix_configure",
)

nixpkgs_local_repository(
    name = "nixpkgs",
    nix_file_deps = ["//:flake.lock"],
    nix_flake_lock_file = "//:flake.lock",
)

################################################
# Shell Rules
################################################
http_archive(
    name = "rules_sh",
    sha256 = "d668bb32f112ead69c58bde2cae62f6b8acefe759a8c95a2d80ff6a85af5ac5e",
    strip_prefix = "rules_sh-0.3.0",
    urls = ["https://github.com/tweag/rules_sh/archive/v0.3.0.tar.gz"],
)

load("@rules_sh//sh:repositories.bzl", "rules_sh_dependencies")

rules_sh_dependencies()

nixpkgs_sh_posix_configure(
    repository = "@nixpkgs",
)

################################################
# Java rules (to resolve JVM deps)
################################################
nixpkgs_java_configure(
    attribute_path = "jdk11.home",
    repository = "@nixpkgs",
    toolchain = True,
    toolchain_name = "nixpkgs_java",
    toolchain_version = "11",
)

################################################
# C/C++ Rules (source from nixpkgs)
################################################
nixpkgs_cc_configure(
    name = "nixpkgs_config_cc",
    nix_file = "//bazel/nix/cc:cc.nix",
    repository = "@nixpkgs",
)

# load rules_cc
http_archive(
    name = "rules_cc",
    sha256 = "4dccbfd22c0def164c8f47458bd50e0c7148f3d92002cdb459c2a96a68498241",
    urls = ["https://github.com/bazelbuild/rules_cc/releases/download/0.0.1/rules_cc-0.0.1.tar.gz"],
)

load("@rules_cc//cc:repositories.bzl", "rules_cc_dependencies", "rules_cc_toolchains")

rules_cc_dependencies()

rules_cc_toolchains()

################################################
# Golang Rules
################################################

http_archive(
    name = "io_bazel_rules_go",
    sha256 = "dd926a88a564a9246713a9c00b35315f54cbd46b31a26d5d8fb264c07045f05d",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.38.1/rules_go-v0.38.1.zip",
        "https://github.com/bazelbuild/rules_go/releases/download/v0.38.1/rules_go-v0.38.1.zip",
    ],
)

load("@io_tweag_rules_nixpkgs//nixpkgs:toolchains/go.bzl", "nixpkgs_go_configure")

nixpkgs_go_configure(repository = "@nixpkgs")

load("@io_bazel_rules_go//go:deps.bzl", "go_register_toolchains", "go_rules_dependencies")

go_rules_dependencies()

# Add lint checking
go_register_toolchains(nogo = "@//:lint")

################################################
# Gazelle Rules (buildfile generation)
################################################
# Use our own gazelle to support our custom resolve_regexp directive.
# TODO(hmodi): Wait until https://github.com/bazelbuild/bazel-gazelle/pull/1542 is merged and in a release
http_archive(
    name = "bazel_gazelle",
    sha256 = "c8089fa552b59106e974b14f3a791dd6641fdcd52b5ddbe31759f0e5fa931d24",
    strip_prefix = "bazel-gazelle-0.2",
    urls = [
        "https://github.com/DolceTriade/bazel-gazelle/archive/refs/tags/v0.2.tar.gz",
    ],
)

load("//third_party/go:deps.bzl", "go_third_party_deps")

# Our deps always go first, so we can override deps of other dependencies.
# In bazel, the first declaration of a dep "wins", so make sure our deps which work
# for the versions we want are used.
# gazelle:repository_macro third_party/go/deps.bzl%go_third_party_deps
go_third_party_deps()

load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies")

gazelle_dependencies(go_repository_default_config = "//:WORKSPACE.bazel")

# Go static analysis tool staticcheck.
http_archive(
    name = "com_github_sluongng_nogo_analyzer",
    sha256 = "a74a5e44751d292d17bd879e5aa8b40baa94b5dc2f043df1e3acbb3e23ead073",
    strip_prefix = "nogo-analyzer-0.0.2",
    urls = [
        "https://github.com/sluongng/nogo-analyzer/archive/refs/tags/v0.0.2.tar.gz",
    ],
)

# Nogo linter libraries
load("@com_github_sluongng_nogo_analyzer//staticcheck:deps.bzl", "staticcheck")

staticcheck()

################################################
# Protobuf Rules
################################################
http_archive(
    name = "com_google_protobuf",
    sha256 = "dc167b7d23ec0d6e4a3d4eae1798de6c8d162e69fa136d39753aaeb7a6e1289d",
    strip_prefix = "protobuf-23.1",
    urls = [
        "https://mirror.bazel.build/github.com/protocolbuffers/protobuf/archive/v23.1.tar.gz",
        "https://github.com/protocolbuffers/protobuf/archive/v23.1.tar.gz",
    ],
)

load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")

protobuf_deps()

################################################
# Python Rules
################################################
http_archive(
    name = "rules_python",
    sha256 = "a644da969b6824cc87f8fe7b18101a8a6c57da5db39caa6566ec6109f37d2141",
    strip_prefix = "rules_python-0.20.0",
    url = "https://github.com/bazelbuild/rules_python/releases/download/0.20.0/rules_python-0.20.0.tar.gz",
)

nixpkgs_python_configure(repository = "@nixpkgs")

load("@rules_python//python/pip_install:repositories.bzl", "pip_install_dependencies")

pip_install_dependencies()

load("@rules_python//python:pip.bzl", "pip_parse")

pip_parse(
    name = "pip",
    requirements_lock = "//third_party/py:requirements.txt",
)

load("@pip//:requirements.bzl", "install_deps")

install_deps()

http_archive(
    name = "rules_python_gazelle_plugin",
    sha256 = "a644da969b6824cc87f8fe7b18101a8a6c57da5db39caa6566ec6109f37d2141",
    strip_prefix = "rules_python-0.20.0/gazelle",
    url = "https://github.com/bazelbuild/rules_python/releases/download/0.20.0/rules_python-0.20.0.tar.gz",
)

# To compile the rules_python gazelle extension from source,
# we must fetch some third-party go dependencies that it uses.

load("@rules_python_gazelle_plugin//:deps.bzl", _py_gazelle_deps = "gazelle_deps")

_py_gazelle_deps()

# Our own version of stackb/rules_proto with Python proto cross resolution support.
# Once https://github.com/stackb/rules_proto/pull/316 is merged, we can start using upstream.
# TODO(hmodi): Should we consider moving this into an Aviatrix org repo?
# Release: v0.2
# TargetCommitish: master
# URL: https://github.com/DolceTriade/rules_proto/releases/tag/v0.2
# Size: 2074370 (2.0 MB)
http_archive(
    name = "build_stack_rules_proto",
    sha256 = "111e6495539f5009aabfbd52db76b9eb8981481b80a4adb81602d54111187412",
    strip_prefix = "rules_proto-0.2",
    urls = ["https://github.com/DolceTriade/rules_proto/archive/refs/tags/v0.2.tar.gz"],
)

load("@build_stack_rules_proto//deps:core_deps.bzl", "core_deps")

core_deps()

register_toolchains("@build_stack_rules_proto//toolchain:standard")

load("@build_stack_rules_proto//:go_deps.bzl", "gazelle_protobuf_extension_go_deps")

gazelle_protobuf_extension_go_deps()

# Rules pkg for rules to create
# Must be after rules_python.
http_archive(
    name = "rules_pkg",
    sha256 = "8c20f74bca25d2d442b327ae26768c02cf3c99e93fad0381f32be9aab1967675",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_pkg/releases/download/0.8.1/rules_pkg-0.8.1.tar.gz",
        "https://github.com/bazelbuild/rules_pkg/releases/download/0.8.1/rules_pkg-0.8.1.tar.gz",
    ],
)

load("@rules_pkg//:deps.bzl", "rules_pkg_dependencies")

rules_pkg_dependencies()

################################################
# Swift Rules
################################################
http_archive(
    name = "build_bazel_rules_swift",
    sha256 = "a2fd565e527f83fb3f9eb07eb9737240e668c9242d3bc318712efa54a7deda97",
    url = "https://github.com/bazelbuild/rules_swift/releases/download/0.27.0/rules_swift.0.27.0.tar.gz",
)

load(
    "@build_bazel_rules_swift//swift:repositories.bzl",
    "swift_rules_dependencies",
)

swift_rules_dependencies()

load(
    "@build_bazel_rules_swift//swift:extras.bzl",
    "swift_rules_extra_dependencies",
)

swift_rules_extra_dependencies()

################################################
# GRPC Rules
################################################
http_archive(
    name = "com_github_grpc_grpc",
    sha256 = "9cf1a69a921534ac0b760dcbefb900f3c2f735f56070bf0536506913bb5bfd74",
    strip_prefix = "grpc-1.55.0",
    urls = [
        "https://github.com/grpc/grpc/archive/refs/tags/v1.55.0.tar.gz",
    ],
)

load("@com_github_grpc_grpc//bazel:grpc_deps.bzl", "grpc_deps")

grpc_deps()

################################################
# Appimage Rules
################################################
RULES_APPIMAGE_VER = "1.0.0"

http_archive(
    name = "rules_appimage",
    sha256 = "3a8abc9093eb920f045de1d623bf10f8950c3cf7fb9e13ef35c5d06f634ccb37",
    strip_prefix = "rules_appimage-{}".format(RULES_APPIMAGE_VER),
    urls = ["https://github.com/lalten/rules_appimage/archive/refs/tags/v{}.tar.gz".format(RULES_APPIMAGE_VER)],
)

load("@rules_appimage//:deps.bzl", "rules_appimage_deps")

rules_appimage_deps()
